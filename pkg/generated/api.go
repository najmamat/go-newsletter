// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// AuthCredentials defines model for AuthCredentials.
type AuthCredentials struct {
	Email    openapi_types.Email `json:"email"`
	Password string              `json:"password"`
}

// AuthResponse defines model for AuthResponse.
type AuthResponse struct {
	AccessToken *string        `json:"access_token,omitempty"`
	User        *EditorProfile `json:"user,omitempty"`
}

// EditorProfile defines model for EditorProfile.
type EditorProfile struct {
	AvatarUrl *string    `json:"avatar_url"`
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Email Editor's email address (from Supabase Auth).
	Email    *openapi_types.Email `json:"email,omitempty"`
	FullName *string              `json:"full_name"`

	// Id User ID from Supabase Auth.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// IsAdmin Indicates if the editor has administrative privileges.
	IsAdmin   *bool      `json:"is_admin,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    int32  `json:"code"`
	Message string `json:"message"`
}

// Newsletter defines model for Newsletter.
type Newsletter struct {
	CreatedAt   *time.Time          `json:"created_at,omitempty"`
	Description *string             `json:"description"`
	EditorId    *openapi_types.UUID `json:"editor_id,omitempty"`
	Id          *openapi_types.UUID `json:"id,omitempty"`
	Name        string              `json:"name"`
	UpdatedAt   *time.Time          `json:"updated_at,omitempty"`
}

// NewsletterCreate defines model for NewsletterCreate.
type NewsletterCreate struct {
	// Description Optional description of the newsletter.
	Description *string `json:"description"`

	// Name Name of the newsletter.
	Name string `json:"name"`
}

// NewsletterUpdate defines model for NewsletterUpdate.
type NewsletterUpdate struct {
	// Description New optional description of the newsletter.
	Description *string `json:"description"`

	// Name New name of the newsletter.
	Name *string `json:"name,omitempty"`
}

// PasswordResetRequest defines model for PasswordResetRequest.
type PasswordResetRequest struct {
	Email openapi_types.Email `json:"email"`
}

// PublishPostRequest defines model for PublishPostRequest.
type PublishPostRequest struct {
	// ContentHtml HTML content of the post.
	ContentHtml string `json:"content_html"`

	// ContentText Plain text version of the post content.
	ContentText *string `json:"content_text"`

	// ScheduledAt Optional. If provided, the post will be scheduled for this time (ISO 8601 format in UTC). Otherwise, published immediately.
	ScheduledAt *time.Time `json:"scheduled_at"`
	Title       string     `json:"title"`
}

// PublishedPost defines model for PublishedPost.
type PublishedPost struct {
	// ContentHtml HTML content of the post.
	ContentHtml string `json:"content_html"`

	// ContentText Plain text version of the post content.
	ContentText  *string             `json:"content_text"`
	CreatedAt    *time.Time          `json:"created_at,omitempty"`
	EditorId     *openapi_types.UUID `json:"editor_id,omitempty"`
	Id           *openapi_types.UUID `json:"id,omitempty"`
	NewsletterId *openapi_types.UUID `json:"newsletter_id,omitempty"`
	PublishedAt  *time.Time          `json:"published_at,omitempty"`

	// ScheduledAt The time at which the post is scheduled to be published (ISO 8601 format in UTC).
	ScheduledAt *time.Time `json:"scheduled_at"`

	// Status Status of the post (e.g., 'draft', 'scheduled', 'publishing', 'published', 'failed')
	Status *string `json:"status,omitempty"`
	Title  string  `json:"title"`
}

// Subscriber defines model for Subscriber.
type Subscriber struct {
	ConfirmationToken *string             `json:"confirmation_token,omitempty"`
	Email             openapi_types.Email `json:"email"`
	Id                *openapi_types.UUID `json:"id,omitempty"`
	IsConfirmed       *bool               `json:"is_confirmed,omitempty"`
	NewsletterId      *openapi_types.UUID `json:"newsletter_id,omitempty"`
	SubscribedAt      *time.Time          `json:"subscribed_at,omitempty"`
	UnsubscribeToken  *string             `json:"unsubscribe_token,omitempty"`
}

// SubscriptionRequest defines model for SubscriptionRequest.
type SubscriptionRequest struct {
	// Email Email address to subscribe.
	Email openapi_types.Email `json:"email"`
}

// BadRequest defines model for BadRequest.
type BadRequest = Error

// Conflict defines model for Conflict.
type Conflict = Error

// Forbidden defines model for Forbidden.
type Forbidden = Error

// InternalServerError defines model for InternalServerError.
type InternalServerError = Error

// NotFound defines model for NotFound.
type NotFound = Error

// Unauthorized defines model for Unauthorized.
type Unauthorized = Error

// PutMeJSONBody defines parameters for PutMe.
type PutMeJSONBody struct {
	AvatarUrl *string `json:"avatar_url"`
	FullName  *string `json:"full_name"`
}

// PostAuthPasswordResetRequestJSONRequestBody defines body for PostAuthPasswordResetRequest for application/json ContentType.
type PostAuthPasswordResetRequestJSONRequestBody = PasswordResetRequest

// PostAuthSigninJSONRequestBody defines body for PostAuthSignin for application/json ContentType.
type PostAuthSigninJSONRequestBody = AuthCredentials

// PostAuthSignupJSONRequestBody defines body for PostAuthSignup for application/json ContentType.
type PostAuthSignupJSONRequestBody = AuthCredentials

// PutMeJSONRequestBody defines body for PutMe for application/json ContentType.
type PutMeJSONRequestBody PutMeJSONBody

// PostNewslettersJSONRequestBody defines body for PostNewsletters for application/json ContentType.
type PostNewslettersJSONRequestBody = NewsletterCreate

// PutNewslettersNewsletterIdJSONRequestBody defines body for PutNewslettersNewsletterId for application/json ContentType.
type PutNewslettersNewsletterIdJSONRequestBody = NewsletterUpdate

// PostNewslettersNewsletterIdPostsJSONRequestBody defines body for PostNewslettersNewsletterIdPosts for application/json ContentType.
type PostNewslettersNewsletterIdPostsJSONRequestBody = PublishPostRequest

// PutNewslettersNewsletterIdScheduledPostsPostIdJSONRequestBody defines body for PutNewslettersNewsletterIdScheduledPostsPostId for application/json ContentType.
type PutNewslettersNewsletterIdScheduledPostsPostIdJSONRequestBody = PublishPostRequest

// PostNewslettersNewsletterIdSubscribeJSONRequestBody defines body for PostNewslettersNewsletterIdSubscribe for application/json ContentType.
type PostNewslettersNewsletterIdSubscribeJSONRequestBody = SubscriptionRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAdminNewsletters request
	GetAdminNewsletters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAdminNewslettersNewsletterId request
	DeleteAdminNewslettersNewsletterId(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAdminUsers request
	GetAdminUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminUsersUserIdGrantAdmin request
	PutAdminUsersUserIdGrantAdmin(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutAdminUsersUserIdRevokeAdmin request
	PutAdminUsersUserIdRevokeAdmin(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthPasswordResetRequestWithBody request with any body
	PostAuthPasswordResetRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthPasswordResetRequest(ctx context.Context, body PostAuthPasswordResetRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthSigninWithBody request with any body
	PostAuthSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthSignin(ctx context.Context, body PostAuthSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostAuthSignupWithBody request with any body
	PostAuthSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostAuthSignup(ctx context.Context, body PostAuthSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMe request
	GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutMeWithBody request with any body
	PutMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutMe(ctx context.Context, body PutMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewsletters request
	GetNewsletters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNewslettersWithBody request with any body
	PostNewslettersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNewsletters(ctx context.Context, body PostNewslettersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNewslettersNewsletterId request
	DeleteNewslettersNewsletterId(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewslettersNewsletterId request
	GetNewslettersNewsletterId(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNewslettersNewsletterIdWithBody request with any body
	PutNewslettersNewsletterIdWithBody(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNewslettersNewsletterId(ctx context.Context, newsletterId openapi_types.UUID, body PutNewslettersNewsletterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewslettersNewsletterIdPosts request
	GetNewslettersNewsletterIdPosts(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNewslettersNewsletterIdPostsWithBody request with any body
	PostNewslettersNewsletterIdPostsWithBody(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNewslettersNewsletterIdPosts(ctx context.Context, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdPostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewslettersNewsletterIdScheduledPosts request
	GetNewslettersNewsletterIdScheduledPosts(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNewslettersNewsletterIdScheduledPostsPostId request
	DeleteNewslettersNewsletterIdScheduledPostsPostId(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewslettersNewsletterIdScheduledPostsPostId request
	GetNewslettersNewsletterIdScheduledPostsPostId(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNewslettersNewsletterIdScheduledPostsPostIdWithBody request with any body
	PutNewslettersNewsletterIdScheduledPostsPostIdWithBody(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNewslettersNewsletterIdScheduledPostsPostId(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, body PutNewslettersNewsletterIdScheduledPostsPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostNewslettersNewsletterIdSubscribeWithBody request with any body
	PostNewslettersNewsletterIdSubscribeWithBody(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostNewslettersNewsletterIdSubscribe(ctx context.Context, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNewslettersNewsletterIdSubscribers request
	GetNewslettersNewsletterIdSubscribers(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSubscribeConfirmConfirmationToken request
	GetSubscribeConfirmConfirmationToken(ctx context.Context, confirmationToken string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnsubscribeUnsubscribeToken request
	GetUnsubscribeUnsubscribeToken(ctx context.Context, unsubscribeToken string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAdminNewsletters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminNewslettersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAdminNewslettersNewsletterId(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAdminNewslettersNewsletterIdRequest(c.Server, newsletterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAdminUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAdminUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminUsersUserIdGrantAdmin(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminUsersUserIdGrantAdminRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutAdminUsersUserIdRevokeAdmin(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutAdminUsersUserIdRevokeAdminRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthPasswordResetRequestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthPasswordResetRequestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthPasswordResetRequest(ctx context.Context, body PostAuthPasswordResetRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthPasswordResetRequestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSigninWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSigninRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSignin(ctx context.Context, body PostAuthSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSigninRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSignupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSignupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostAuthSignup(ctx context.Context, body PostAuthSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostAuthSignupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMeWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMeRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutMe(ctx context.Context, body PutMeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutMeRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewsletters(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewslettersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNewslettersWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNewslettersRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNewsletters(ctx context.Context, body PostNewslettersJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNewslettersRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNewslettersNewsletterId(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNewslettersNewsletterIdRequest(c.Server, newsletterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewslettersNewsletterId(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewslettersNewsletterIdRequest(c.Server, newsletterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNewslettersNewsletterIdWithBody(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNewslettersNewsletterIdRequestWithBody(c.Server, newsletterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNewslettersNewsletterId(ctx context.Context, newsletterId openapi_types.UUID, body PutNewslettersNewsletterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNewslettersNewsletterIdRequest(c.Server, newsletterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewslettersNewsletterIdPosts(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewslettersNewsletterIdPostsRequest(c.Server, newsletterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNewslettersNewsletterIdPostsWithBody(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNewslettersNewsletterIdPostsRequestWithBody(c.Server, newsletterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNewslettersNewsletterIdPosts(ctx context.Context, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdPostsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNewslettersNewsletterIdPostsRequest(c.Server, newsletterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewslettersNewsletterIdScheduledPosts(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewslettersNewsletterIdScheduledPostsRequest(c.Server, newsletterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNewslettersNewsletterIdScheduledPostsPostId(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNewslettersNewsletterIdScheduledPostsPostIdRequest(c.Server, newsletterId, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewslettersNewsletterIdScheduledPostsPostId(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewslettersNewsletterIdScheduledPostsPostIdRequest(c.Server, newsletterId, postId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNewslettersNewsletterIdScheduledPostsPostIdWithBody(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNewslettersNewsletterIdScheduledPostsPostIdRequestWithBody(c.Server, newsletterId, postId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNewslettersNewsletterIdScheduledPostsPostId(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, body PutNewslettersNewsletterIdScheduledPostsPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNewslettersNewsletterIdScheduledPostsPostIdRequest(c.Server, newsletterId, postId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNewslettersNewsletterIdSubscribeWithBody(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNewslettersNewsletterIdSubscribeRequestWithBody(c.Server, newsletterId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostNewslettersNewsletterIdSubscribe(ctx context.Context, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostNewslettersNewsletterIdSubscribeRequest(c.Server, newsletterId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNewslettersNewsletterIdSubscribers(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNewslettersNewsletterIdSubscribersRequest(c.Server, newsletterId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSubscribeConfirmConfirmationToken(ctx context.Context, confirmationToken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSubscribeConfirmConfirmationTokenRequest(c.Server, confirmationToken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnsubscribeUnsubscribeToken(ctx context.Context, unsubscribeToken string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnsubscribeUnsubscribeTokenRequest(c.Server, unsubscribeToken)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAdminNewslettersRequest generates requests for GetAdminNewsletters
func NewGetAdminNewslettersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/newsletters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAdminNewslettersNewsletterIdRequest generates requests for DeleteAdminNewslettersNewsletterId
func NewDeleteAdminNewslettersNewsletterIdRequest(server string, newsletterId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/newsletters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAdminUsersRequest generates requests for GetAdminUsers
func NewGetAdminUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminUsersUserIdGrantAdminRequest generates requests for PutAdminUsersUserIdGrantAdmin
func NewPutAdminUsersUserIdGrantAdminRequest(server string, userId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s/grant-admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutAdminUsersUserIdRevokeAdminRequest generates requests for PutAdminUsersUserIdRevokeAdmin
func NewPutAdminUsersUserIdRevokeAdminRequest(server string, userId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/admin/users/%s/revoke-admin", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostAuthPasswordResetRequestRequest calls the generic PostAuthPasswordResetRequest builder with application/json body
func NewPostAuthPasswordResetRequestRequest(server string, body PostAuthPasswordResetRequestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthPasswordResetRequestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthPasswordResetRequestRequestWithBody generates requests for PostAuthPasswordResetRequest with any type of body
func NewPostAuthPasswordResetRequestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/password-reset-request")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthSigninRequest calls the generic PostAuthSignin builder with application/json body
func NewPostAuthSigninRequest(server string, body PostAuthSigninJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthSigninRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthSigninRequestWithBody generates requests for PostAuthSignin with any type of body
func NewPostAuthSigninRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/signin")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostAuthSignupRequest calls the generic PostAuthSignup builder with application/json body
func NewPostAuthSignupRequest(server string, body PostAuthSignupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostAuthSignupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostAuthSignupRequestWithBody generates requests for PostAuthSignup with any type of body
func NewPostAuthSignupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/signup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMeRequest generates requests for GetMe
func NewGetMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutMeRequest calls the generic PutMe builder with application/json body
func NewPutMeRequest(server string, body PutMeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutMeRequestWithBody(server, "application/json", bodyReader)
}

// NewPutMeRequestWithBody generates requests for PutMe with any type of body
func NewPutMeRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewslettersRequest generates requests for GetNewsletters
func NewGetNewslettersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostNewslettersRequest calls the generic PostNewsletters builder with application/json body
func NewPostNewslettersRequest(server string, body PostNewslettersJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNewslettersRequestWithBody(server, "application/json", bodyReader)
}

// NewPostNewslettersRequestWithBody generates requests for PostNewsletters with any type of body
func NewPostNewslettersRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteNewslettersNewsletterIdRequest generates requests for DeleteNewslettersNewsletterId
func NewDeleteNewslettersNewsletterIdRequest(server string, newsletterId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNewslettersNewsletterIdRequest generates requests for GetNewslettersNewsletterId
func NewGetNewslettersNewsletterIdRequest(server string, newsletterId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNewslettersNewsletterIdRequest calls the generic PutNewslettersNewsletterId builder with application/json body
func NewPutNewslettersNewsletterIdRequest(server string, newsletterId openapi_types.UUID, body PutNewslettersNewsletterIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNewslettersNewsletterIdRequestWithBody(server, newsletterId, "application/json", bodyReader)
}

// NewPutNewslettersNewsletterIdRequestWithBody generates requests for PutNewslettersNewsletterId with any type of body
func NewPutNewslettersNewsletterIdRequestWithBody(server string, newsletterId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewslettersNewsletterIdPostsRequest generates requests for GetNewslettersNewsletterIdPosts
func NewGetNewslettersNewsletterIdPostsRequest(server string, newsletterId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s/posts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostNewslettersNewsletterIdPostsRequest calls the generic PostNewslettersNewsletterIdPosts builder with application/json body
func NewPostNewslettersNewsletterIdPostsRequest(server string, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdPostsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNewslettersNewsletterIdPostsRequestWithBody(server, newsletterId, "application/json", bodyReader)
}

// NewPostNewslettersNewsletterIdPostsRequestWithBody generates requests for PostNewslettersNewsletterIdPosts with any type of body
func NewPostNewslettersNewsletterIdPostsRequestWithBody(server string, newsletterId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s/posts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewslettersNewsletterIdScheduledPostsRequest generates requests for GetNewslettersNewsletterIdScheduledPosts
func NewGetNewslettersNewsletterIdScheduledPostsRequest(server string, newsletterId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s/scheduled-posts", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNewslettersNewsletterIdScheduledPostsPostIdRequest generates requests for DeleteNewslettersNewsletterIdScheduledPostsPostId
func NewDeleteNewslettersNewsletterIdScheduledPostsPostIdRequest(server string, newsletterId openapi_types.UUID, postId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s/scheduled-posts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNewslettersNewsletterIdScheduledPostsPostIdRequest generates requests for GetNewslettersNewsletterIdScheduledPostsPostId
func NewGetNewslettersNewsletterIdScheduledPostsPostIdRequest(server string, newsletterId openapi_types.UUID, postId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s/scheduled-posts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNewslettersNewsletterIdScheduledPostsPostIdRequest calls the generic PutNewslettersNewsletterIdScheduledPostsPostId builder with application/json body
func NewPutNewslettersNewsletterIdScheduledPostsPostIdRequest(server string, newsletterId openapi_types.UUID, postId openapi_types.UUID, body PutNewslettersNewsletterIdScheduledPostsPostIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNewslettersNewsletterIdScheduledPostsPostIdRequestWithBody(server, newsletterId, postId, "application/json", bodyReader)
}

// NewPutNewslettersNewsletterIdScheduledPostsPostIdRequestWithBody generates requests for PutNewslettersNewsletterIdScheduledPostsPostId with any type of body
func NewPutNewslettersNewsletterIdScheduledPostsPostIdRequestWithBody(server string, newsletterId openapi_types.UUID, postId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "postId", runtime.ParamLocationPath, postId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s/scheduled-posts/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostNewslettersNewsletterIdSubscribeRequest calls the generic PostNewslettersNewsletterIdSubscribe builder with application/json body
func NewPostNewslettersNewsletterIdSubscribeRequest(server string, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdSubscribeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostNewslettersNewsletterIdSubscribeRequestWithBody(server, newsletterId, "application/json", bodyReader)
}

// NewPostNewslettersNewsletterIdSubscribeRequestWithBody generates requests for PostNewslettersNewsletterIdSubscribe with any type of body
func NewPostNewslettersNewsletterIdSubscribeRequestWithBody(server string, newsletterId openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s/subscribe", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetNewslettersNewsletterIdSubscribersRequest generates requests for GetNewslettersNewsletterIdSubscribers
func NewGetNewslettersNewsletterIdSubscribersRequest(server string, newsletterId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "newsletterId", runtime.ParamLocationPath, newsletterId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/newsletters/%s/subscribers", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSubscribeConfirmConfirmationTokenRequest generates requests for GetSubscribeConfirmConfirmationToken
func NewGetSubscribeConfirmConfirmationTokenRequest(server string, confirmationToken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "confirmationToken", runtime.ParamLocationPath, confirmationToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/subscribe/confirm/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnsubscribeUnsubscribeTokenRequest generates requests for GetUnsubscribeUnsubscribeToken
func NewGetUnsubscribeUnsubscribeTokenRequest(server string, unsubscribeToken string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "unsubscribeToken", runtime.ParamLocationPath, unsubscribeToken)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/unsubscribe/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAdminNewslettersWithResponse request
	GetAdminNewslettersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminNewslettersResponse, error)

	// DeleteAdminNewslettersNewsletterIdWithResponse request
	DeleteAdminNewslettersNewsletterIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAdminNewslettersNewsletterIdResponse, error)

	// GetAdminUsersWithResponse request
	GetAdminUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminUsersResponse, error)

	// PutAdminUsersUserIdGrantAdminWithResponse request
	PutAdminUsersUserIdGrantAdminWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutAdminUsersUserIdGrantAdminResponse, error)

	// PutAdminUsersUserIdRevokeAdminWithResponse request
	PutAdminUsersUserIdRevokeAdminWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutAdminUsersUserIdRevokeAdminResponse, error)

	// PostAuthPasswordResetRequestWithBodyWithResponse request with any body
	PostAuthPasswordResetRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthPasswordResetRequestResponse, error)

	PostAuthPasswordResetRequestWithResponse(ctx context.Context, body PostAuthPasswordResetRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthPasswordResetRequestResponse, error)

	// PostAuthSigninWithBodyWithResponse request with any body
	PostAuthSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSigninResponse, error)

	PostAuthSigninWithResponse(ctx context.Context, body PostAuthSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSigninResponse, error)

	// PostAuthSignupWithBodyWithResponse request with any body
	PostAuthSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSignupResponse, error)

	PostAuthSignupWithResponse(ctx context.Context, body PostAuthSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSignupResponse, error)

	// GetMeWithResponse request
	GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error)

	// PutMeWithBodyWithResponse request with any body
	PutMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMeResponse, error)

	PutMeWithResponse(ctx context.Context, body PutMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMeResponse, error)

	// GetNewslettersWithResponse request
	GetNewslettersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewslettersResponse, error)

	// PostNewslettersWithBodyWithResponse request with any body
	PostNewslettersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNewslettersResponse, error)

	PostNewslettersWithResponse(ctx context.Context, body PostNewslettersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNewslettersResponse, error)

	// DeleteNewslettersNewsletterIdWithResponse request
	DeleteNewslettersNewsletterIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteNewslettersNewsletterIdResponse, error)

	// GetNewslettersNewsletterIdWithResponse request
	GetNewslettersNewsletterIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdResponse, error)

	// PutNewslettersNewsletterIdWithBodyWithResponse request with any body
	PutNewslettersNewsletterIdWithBodyWithResponse(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNewslettersNewsletterIdResponse, error)

	PutNewslettersNewsletterIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, body PutNewslettersNewsletterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNewslettersNewsletterIdResponse, error)

	// GetNewslettersNewsletterIdPostsWithResponse request
	GetNewslettersNewsletterIdPostsWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdPostsResponse, error)

	// PostNewslettersNewsletterIdPostsWithBodyWithResponse request with any body
	PostNewslettersNewsletterIdPostsWithBodyWithResponse(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNewslettersNewsletterIdPostsResponse, error)

	PostNewslettersNewsletterIdPostsWithResponse(ctx context.Context, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdPostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNewslettersNewsletterIdPostsResponse, error)

	// GetNewslettersNewsletterIdScheduledPostsWithResponse request
	GetNewslettersNewsletterIdScheduledPostsWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdScheduledPostsResponse, error)

	// DeleteNewslettersNewsletterIdScheduledPostsPostIdWithResponse request
	DeleteNewslettersNewsletterIdScheduledPostsPostIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteNewslettersNewsletterIdScheduledPostsPostIdResponse, error)

	// GetNewslettersNewsletterIdScheduledPostsPostIdWithResponse request
	GetNewslettersNewsletterIdScheduledPostsPostIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdScheduledPostsPostIdResponse, error)

	// PutNewslettersNewsletterIdScheduledPostsPostIdWithBodyWithResponse request with any body
	PutNewslettersNewsletterIdScheduledPostsPostIdWithBodyWithResponse(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNewslettersNewsletterIdScheduledPostsPostIdResponse, error)

	PutNewslettersNewsletterIdScheduledPostsPostIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, body PutNewslettersNewsletterIdScheduledPostsPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNewslettersNewsletterIdScheduledPostsPostIdResponse, error)

	// PostNewslettersNewsletterIdSubscribeWithBodyWithResponse request with any body
	PostNewslettersNewsletterIdSubscribeWithBodyWithResponse(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNewslettersNewsletterIdSubscribeResponse, error)

	PostNewslettersNewsletterIdSubscribeWithResponse(ctx context.Context, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNewslettersNewsletterIdSubscribeResponse, error)

	// GetNewslettersNewsletterIdSubscribersWithResponse request
	GetNewslettersNewsletterIdSubscribersWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdSubscribersResponse, error)

	// GetSubscribeConfirmConfirmationTokenWithResponse request
	GetSubscribeConfirmConfirmationTokenWithResponse(ctx context.Context, confirmationToken string, reqEditors ...RequestEditorFn) (*GetSubscribeConfirmConfirmationTokenResponse, error)

	// GetUnsubscribeUnsubscribeTokenWithResponse request
	GetUnsubscribeUnsubscribeTokenWithResponse(ctx context.Context, unsubscribeToken string, reqEditors ...RequestEditorFn) (*GetUnsubscribeUnsubscribeTokenResponse, error)
}

type GetAdminNewslettersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Newsletter
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetAdminNewslettersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminNewslettersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAdminNewslettersNewsletterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteAdminNewslettersNewsletterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAdminNewslettersNewsletterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAdminUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]EditorProfile
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetAdminUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAdminUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminUsersUserIdGrantAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EditorProfile
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PutAdminUsersUserIdGrantAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminUsersUserIdGrantAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutAdminUsersUserIdRevokeAdminResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EditorProfile
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PutAdminUsersUserIdRevokeAdminResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutAdminUsersUserIdRevokeAdminResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthPasswordResetRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *BadRequest
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostAuthPasswordResetRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthPasswordResetRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthSigninResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthResponse
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostAuthSigninResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthSigninResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostAuthSignupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthResponse
	JSON400      *BadRequest
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostAuthSignupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostAuthSignupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EditorProfile
	JSON401      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *EditorProfile
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PutMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewslettersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Newsletter
	JSON401      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetNewslettersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewslettersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNewslettersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *Newsletter
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostNewslettersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNewslettersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNewslettersNewsletterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteNewslettersNewsletterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNewslettersNewsletterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewslettersNewsletterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Newsletter
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetNewslettersNewsletterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewslettersNewsletterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNewslettersNewsletterIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Newsletter
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PutNewslettersNewsletterIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNewslettersNewsletterIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewslettersNewsletterIdPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PublishedPost
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetNewslettersNewsletterIdPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewslettersNewsletterIdPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNewslettersNewsletterIdPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *PublishedPost
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostNewslettersNewsletterIdPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNewslettersNewsletterIdPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewslettersNewsletterIdScheduledPostsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PublishedPost
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetNewslettersNewsletterIdScheduledPostsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewslettersNewsletterIdScheduledPostsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNewslettersNewsletterIdScheduledPostsPostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r DeleteNewslettersNewsletterIdScheduledPostsPostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNewslettersNewsletterIdScheduledPostsPostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewslettersNewsletterIdScheduledPostsPostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublishedPost
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetNewslettersNewsletterIdScheduledPostsPostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewslettersNewsletterIdScheduledPostsPostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNewslettersNewsletterIdScheduledPostsPostIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PublishedPost
	JSON400      *BadRequest
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PutNewslettersNewsletterIdScheduledPostsPostIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNewslettersNewsletterIdScheduledPostsPostIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostNewslettersNewsletterIdSubscribeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message    *string     `json:"message,omitempty"`
		Subscriber *Subscriber `json:"subscriber,omitempty"`
	}
	JSON400 *BadRequest
	JSON404 *NotFound
	JSON409 *Conflict
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r PostNewslettersNewsletterIdSubscribeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostNewslettersNewsletterIdSubscribeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNewslettersNewsletterIdSubscribersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Subscriber
	JSON401      *Unauthorized
	JSON403      *Forbidden
	JSON404      *NotFound
	JSON500      *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetNewslettersNewsletterIdSubscribersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNewslettersNewsletterIdSubscribersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSubscribeConfirmConfirmationTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *BadRequest
	JSON404 *NotFound
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetSubscribeConfirmConfirmationTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSubscribeConfirmConfirmationTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnsubscribeUnsubscribeTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Message *string `json:"message,omitempty"`
	}
	JSON400 *BadRequest
	JSON404 *NotFound
	JSON500 *InternalServerError
}

// Status returns HTTPResponse.Status
func (r GetUnsubscribeUnsubscribeTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnsubscribeUnsubscribeTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAdminNewslettersWithResponse request returning *GetAdminNewslettersResponse
func (c *ClientWithResponses) GetAdminNewslettersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminNewslettersResponse, error) {
	rsp, err := c.GetAdminNewsletters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminNewslettersResponse(rsp)
}

// DeleteAdminNewslettersNewsletterIdWithResponse request returning *DeleteAdminNewslettersNewsletterIdResponse
func (c *ClientWithResponses) DeleteAdminNewslettersNewsletterIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAdminNewslettersNewsletterIdResponse, error) {
	rsp, err := c.DeleteAdminNewslettersNewsletterId(ctx, newsletterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAdminNewslettersNewsletterIdResponse(rsp)
}

// GetAdminUsersWithResponse request returning *GetAdminUsersResponse
func (c *ClientWithResponses) GetAdminUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAdminUsersResponse, error) {
	rsp, err := c.GetAdminUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAdminUsersResponse(rsp)
}

// PutAdminUsersUserIdGrantAdminWithResponse request returning *PutAdminUsersUserIdGrantAdminResponse
func (c *ClientWithResponses) PutAdminUsersUserIdGrantAdminWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutAdminUsersUserIdGrantAdminResponse, error) {
	rsp, err := c.PutAdminUsersUserIdGrantAdmin(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminUsersUserIdGrantAdminResponse(rsp)
}

// PutAdminUsersUserIdRevokeAdminWithResponse request returning *PutAdminUsersUserIdRevokeAdminResponse
func (c *ClientWithResponses) PutAdminUsersUserIdRevokeAdminWithResponse(ctx context.Context, userId openapi_types.UUID, reqEditors ...RequestEditorFn) (*PutAdminUsersUserIdRevokeAdminResponse, error) {
	rsp, err := c.PutAdminUsersUserIdRevokeAdmin(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutAdminUsersUserIdRevokeAdminResponse(rsp)
}

// PostAuthPasswordResetRequestWithBodyWithResponse request with arbitrary body returning *PostAuthPasswordResetRequestResponse
func (c *ClientWithResponses) PostAuthPasswordResetRequestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthPasswordResetRequestResponse, error) {
	rsp, err := c.PostAuthPasswordResetRequestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthPasswordResetRequestResponse(rsp)
}

func (c *ClientWithResponses) PostAuthPasswordResetRequestWithResponse(ctx context.Context, body PostAuthPasswordResetRequestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthPasswordResetRequestResponse, error) {
	rsp, err := c.PostAuthPasswordResetRequest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthPasswordResetRequestResponse(rsp)
}

// PostAuthSigninWithBodyWithResponse request with arbitrary body returning *PostAuthSigninResponse
func (c *ClientWithResponses) PostAuthSigninWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSigninResponse, error) {
	rsp, err := c.PostAuthSigninWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSigninResponse(rsp)
}

func (c *ClientWithResponses) PostAuthSigninWithResponse(ctx context.Context, body PostAuthSigninJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSigninResponse, error) {
	rsp, err := c.PostAuthSignin(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSigninResponse(rsp)
}

// PostAuthSignupWithBodyWithResponse request with arbitrary body returning *PostAuthSignupResponse
func (c *ClientWithResponses) PostAuthSignupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostAuthSignupResponse, error) {
	rsp, err := c.PostAuthSignupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSignupResponse(rsp)
}

func (c *ClientWithResponses) PostAuthSignupWithResponse(ctx context.Context, body PostAuthSignupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostAuthSignupResponse, error) {
	rsp, err := c.PostAuthSignup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostAuthSignupResponse(rsp)
}

// GetMeWithResponse request returning *GetMeResponse
func (c *ClientWithResponses) GetMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMeResponse, error) {
	rsp, err := c.GetMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMeResponse(rsp)
}

// PutMeWithBodyWithResponse request with arbitrary body returning *PutMeResponse
func (c *ClientWithResponses) PutMeWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutMeResponse, error) {
	rsp, err := c.PutMeWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMeResponse(rsp)
}

func (c *ClientWithResponses) PutMeWithResponse(ctx context.Context, body PutMeJSONRequestBody, reqEditors ...RequestEditorFn) (*PutMeResponse, error) {
	rsp, err := c.PutMe(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutMeResponse(rsp)
}

// GetNewslettersWithResponse request returning *GetNewslettersResponse
func (c *ClientWithResponses) GetNewslettersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetNewslettersResponse, error) {
	rsp, err := c.GetNewsletters(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewslettersResponse(rsp)
}

// PostNewslettersWithBodyWithResponse request with arbitrary body returning *PostNewslettersResponse
func (c *ClientWithResponses) PostNewslettersWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNewslettersResponse, error) {
	rsp, err := c.PostNewslettersWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNewslettersResponse(rsp)
}

func (c *ClientWithResponses) PostNewslettersWithResponse(ctx context.Context, body PostNewslettersJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNewslettersResponse, error) {
	rsp, err := c.PostNewsletters(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNewslettersResponse(rsp)
}

// DeleteNewslettersNewsletterIdWithResponse request returning *DeleteNewslettersNewsletterIdResponse
func (c *ClientWithResponses) DeleteNewslettersNewsletterIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteNewslettersNewsletterIdResponse, error) {
	rsp, err := c.DeleteNewslettersNewsletterId(ctx, newsletterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNewslettersNewsletterIdResponse(rsp)
}

// GetNewslettersNewsletterIdWithResponse request returning *GetNewslettersNewsletterIdResponse
func (c *ClientWithResponses) GetNewslettersNewsletterIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdResponse, error) {
	rsp, err := c.GetNewslettersNewsletterId(ctx, newsletterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewslettersNewsletterIdResponse(rsp)
}

// PutNewslettersNewsletterIdWithBodyWithResponse request with arbitrary body returning *PutNewslettersNewsletterIdResponse
func (c *ClientWithResponses) PutNewslettersNewsletterIdWithBodyWithResponse(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNewslettersNewsletterIdResponse, error) {
	rsp, err := c.PutNewslettersNewsletterIdWithBody(ctx, newsletterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNewslettersNewsletterIdResponse(rsp)
}

func (c *ClientWithResponses) PutNewslettersNewsletterIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, body PutNewslettersNewsletterIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNewslettersNewsletterIdResponse, error) {
	rsp, err := c.PutNewslettersNewsletterId(ctx, newsletterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNewslettersNewsletterIdResponse(rsp)
}

// GetNewslettersNewsletterIdPostsWithResponse request returning *GetNewslettersNewsletterIdPostsResponse
func (c *ClientWithResponses) GetNewslettersNewsletterIdPostsWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdPostsResponse, error) {
	rsp, err := c.GetNewslettersNewsletterIdPosts(ctx, newsletterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewslettersNewsletterIdPostsResponse(rsp)
}

// PostNewslettersNewsletterIdPostsWithBodyWithResponse request with arbitrary body returning *PostNewslettersNewsletterIdPostsResponse
func (c *ClientWithResponses) PostNewslettersNewsletterIdPostsWithBodyWithResponse(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNewslettersNewsletterIdPostsResponse, error) {
	rsp, err := c.PostNewslettersNewsletterIdPostsWithBody(ctx, newsletterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNewslettersNewsletterIdPostsResponse(rsp)
}

func (c *ClientWithResponses) PostNewslettersNewsletterIdPostsWithResponse(ctx context.Context, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdPostsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNewslettersNewsletterIdPostsResponse, error) {
	rsp, err := c.PostNewslettersNewsletterIdPosts(ctx, newsletterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNewslettersNewsletterIdPostsResponse(rsp)
}

// GetNewslettersNewsletterIdScheduledPostsWithResponse request returning *GetNewslettersNewsletterIdScheduledPostsResponse
func (c *ClientWithResponses) GetNewslettersNewsletterIdScheduledPostsWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdScheduledPostsResponse, error) {
	rsp, err := c.GetNewslettersNewsletterIdScheduledPosts(ctx, newsletterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewslettersNewsletterIdScheduledPostsResponse(rsp)
}

// DeleteNewslettersNewsletterIdScheduledPostsPostIdWithResponse request returning *DeleteNewslettersNewsletterIdScheduledPostsPostIdResponse
func (c *ClientWithResponses) DeleteNewslettersNewsletterIdScheduledPostsPostIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteNewslettersNewsletterIdScheduledPostsPostIdResponse, error) {
	rsp, err := c.DeleteNewslettersNewsletterIdScheduledPostsPostId(ctx, newsletterId, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNewslettersNewsletterIdScheduledPostsPostIdResponse(rsp)
}

// GetNewslettersNewsletterIdScheduledPostsPostIdWithResponse request returning *GetNewslettersNewsletterIdScheduledPostsPostIdResponse
func (c *ClientWithResponses) GetNewslettersNewsletterIdScheduledPostsPostIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdScheduledPostsPostIdResponse, error) {
	rsp, err := c.GetNewslettersNewsletterIdScheduledPostsPostId(ctx, newsletterId, postId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewslettersNewsletterIdScheduledPostsPostIdResponse(rsp)
}

// PutNewslettersNewsletterIdScheduledPostsPostIdWithBodyWithResponse request with arbitrary body returning *PutNewslettersNewsletterIdScheduledPostsPostIdResponse
func (c *ClientWithResponses) PutNewslettersNewsletterIdScheduledPostsPostIdWithBodyWithResponse(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNewslettersNewsletterIdScheduledPostsPostIdResponse, error) {
	rsp, err := c.PutNewslettersNewsletterIdScheduledPostsPostIdWithBody(ctx, newsletterId, postId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNewslettersNewsletterIdScheduledPostsPostIdResponse(rsp)
}

func (c *ClientWithResponses) PutNewslettersNewsletterIdScheduledPostsPostIdWithResponse(ctx context.Context, newsletterId openapi_types.UUID, postId openapi_types.UUID, body PutNewslettersNewsletterIdScheduledPostsPostIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNewslettersNewsletterIdScheduledPostsPostIdResponse, error) {
	rsp, err := c.PutNewslettersNewsletterIdScheduledPostsPostId(ctx, newsletterId, postId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNewslettersNewsletterIdScheduledPostsPostIdResponse(rsp)
}

// PostNewslettersNewsletterIdSubscribeWithBodyWithResponse request with arbitrary body returning *PostNewslettersNewsletterIdSubscribeResponse
func (c *ClientWithResponses) PostNewslettersNewsletterIdSubscribeWithBodyWithResponse(ctx context.Context, newsletterId openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostNewslettersNewsletterIdSubscribeResponse, error) {
	rsp, err := c.PostNewslettersNewsletterIdSubscribeWithBody(ctx, newsletterId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNewslettersNewsletterIdSubscribeResponse(rsp)
}

func (c *ClientWithResponses) PostNewslettersNewsletterIdSubscribeWithResponse(ctx context.Context, newsletterId openapi_types.UUID, body PostNewslettersNewsletterIdSubscribeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostNewslettersNewsletterIdSubscribeResponse, error) {
	rsp, err := c.PostNewslettersNewsletterIdSubscribe(ctx, newsletterId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostNewslettersNewsletterIdSubscribeResponse(rsp)
}

// GetNewslettersNewsletterIdSubscribersWithResponse request returning *GetNewslettersNewsletterIdSubscribersResponse
func (c *ClientWithResponses) GetNewslettersNewsletterIdSubscribersWithResponse(ctx context.Context, newsletterId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetNewslettersNewsletterIdSubscribersResponse, error) {
	rsp, err := c.GetNewslettersNewsletterIdSubscribers(ctx, newsletterId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNewslettersNewsletterIdSubscribersResponse(rsp)
}

// GetSubscribeConfirmConfirmationTokenWithResponse request returning *GetSubscribeConfirmConfirmationTokenResponse
func (c *ClientWithResponses) GetSubscribeConfirmConfirmationTokenWithResponse(ctx context.Context, confirmationToken string, reqEditors ...RequestEditorFn) (*GetSubscribeConfirmConfirmationTokenResponse, error) {
	rsp, err := c.GetSubscribeConfirmConfirmationToken(ctx, confirmationToken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSubscribeConfirmConfirmationTokenResponse(rsp)
}

// GetUnsubscribeUnsubscribeTokenWithResponse request returning *GetUnsubscribeUnsubscribeTokenResponse
func (c *ClientWithResponses) GetUnsubscribeUnsubscribeTokenWithResponse(ctx context.Context, unsubscribeToken string, reqEditors ...RequestEditorFn) (*GetUnsubscribeUnsubscribeTokenResponse, error) {
	rsp, err := c.GetUnsubscribeUnsubscribeToken(ctx, unsubscribeToken, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnsubscribeUnsubscribeTokenResponse(rsp)
}

// ParseGetAdminNewslettersResponse parses an HTTP response from a GetAdminNewslettersWithResponse call
func ParseGetAdminNewslettersResponse(rsp *http.Response) (*GetAdminNewslettersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminNewslettersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Newsletter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAdminNewslettersNewsletterIdResponse parses an HTTP response from a DeleteAdminNewslettersNewsletterIdWithResponse call
func ParseDeleteAdminNewslettersNewsletterIdResponse(rsp *http.Response) (*DeleteAdminNewslettersNewsletterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAdminNewslettersNewsletterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAdminUsersResponse parses an HTTP response from a GetAdminUsersWithResponse call
func ParseGetAdminUsersResponse(rsp *http.Response) (*GetAdminUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAdminUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []EditorProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutAdminUsersUserIdGrantAdminResponse parses an HTTP response from a PutAdminUsersUserIdGrantAdminWithResponse call
func ParsePutAdminUsersUserIdGrantAdminResponse(rsp *http.Response) (*PutAdminUsersUserIdGrantAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminUsersUserIdGrantAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EditorProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutAdminUsersUserIdRevokeAdminResponse parses an HTTP response from a PutAdminUsersUserIdRevokeAdminWithResponse call
func ParsePutAdminUsersUserIdRevokeAdminResponse(rsp *http.Response) (*PutAdminUsersUserIdRevokeAdminResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutAdminUsersUserIdRevokeAdminResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EditorProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthPasswordResetRequestResponse parses an HTTP response from a PostAuthPasswordResetRequestWithResponse call
func ParsePostAuthPasswordResetRequestResponse(rsp *http.Response) (*PostAuthPasswordResetRequestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthPasswordResetRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthSigninResponse parses an HTTP response from a PostAuthSigninWithResponse call
func ParsePostAuthSigninResponse(rsp *http.Response) (*PostAuthSigninResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthSigninResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostAuthSignupResponse parses an HTTP response from a PostAuthSignupWithResponse call
func ParsePostAuthSignupResponse(rsp *http.Response) (*PostAuthSignupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostAuthSignupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMeResponse parses an HTTP response from a GetMeWithResponse call
func ParseGetMeResponse(rsp *http.Response) (*GetMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EditorProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutMeResponse parses an HTTP response from a PutMeWithResponse call
func ParsePutMeResponse(rsp *http.Response) (*PutMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest EditorProfile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetNewslettersResponse parses an HTTP response from a GetNewslettersWithResponse call
func ParseGetNewslettersResponse(rsp *http.Response) (*GetNewslettersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewslettersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Newsletter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostNewslettersResponse parses an HTTP response from a PostNewslettersWithResponse call
func ParsePostNewslettersResponse(rsp *http.Response) (*PostNewslettersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNewslettersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Newsletter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteNewslettersNewsletterIdResponse parses an HTTP response from a DeleteNewslettersNewsletterIdWithResponse call
func ParseDeleteNewslettersNewsletterIdResponse(rsp *http.Response) (*DeleteNewslettersNewsletterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNewslettersNewsletterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetNewslettersNewsletterIdResponse parses an HTTP response from a GetNewslettersNewsletterIdWithResponse call
func ParseGetNewslettersNewsletterIdResponse(rsp *http.Response) (*GetNewslettersNewsletterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewslettersNewsletterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Newsletter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutNewslettersNewsletterIdResponse parses an HTTP response from a PutNewslettersNewsletterIdWithResponse call
func ParsePutNewslettersNewsletterIdResponse(rsp *http.Response) (*PutNewslettersNewsletterIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNewslettersNewsletterIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Newsletter
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetNewslettersNewsletterIdPostsResponse parses an HTTP response from a GetNewslettersNewsletterIdPostsWithResponse call
func ParseGetNewslettersNewsletterIdPostsResponse(rsp *http.Response) (*GetNewslettersNewsletterIdPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewslettersNewsletterIdPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PublishedPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostNewslettersNewsletterIdPostsResponse parses an HTTP response from a PostNewslettersNewsletterIdPostsWithResponse call
func ParsePostNewslettersNewsletterIdPostsResponse(rsp *http.Response) (*PostNewslettersNewsletterIdPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNewslettersNewsletterIdPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest PublishedPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetNewslettersNewsletterIdScheduledPostsResponse parses an HTTP response from a GetNewslettersNewsletterIdScheduledPostsWithResponse call
func ParseGetNewslettersNewsletterIdScheduledPostsResponse(rsp *http.Response) (*GetNewslettersNewsletterIdScheduledPostsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewslettersNewsletterIdScheduledPostsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PublishedPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteNewslettersNewsletterIdScheduledPostsPostIdResponse parses an HTTP response from a DeleteNewslettersNewsletterIdScheduledPostsPostIdWithResponse call
func ParseDeleteNewslettersNewsletterIdScheduledPostsPostIdResponse(rsp *http.Response) (*DeleteNewslettersNewsletterIdScheduledPostsPostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNewslettersNewsletterIdScheduledPostsPostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetNewslettersNewsletterIdScheduledPostsPostIdResponse parses an HTTP response from a GetNewslettersNewsletterIdScheduledPostsPostIdWithResponse call
func ParseGetNewslettersNewsletterIdScheduledPostsPostIdResponse(rsp *http.Response) (*GetNewslettersNewsletterIdScheduledPostsPostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewslettersNewsletterIdScheduledPostsPostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublishedPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePutNewslettersNewsletterIdScheduledPostsPostIdResponse parses an HTTP response from a PutNewslettersNewsletterIdScheduledPostsPostIdWithResponse call
func ParsePutNewslettersNewsletterIdScheduledPostsPostIdResponse(rsp *http.Response) (*PutNewslettersNewsletterIdScheduledPostsPostIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNewslettersNewsletterIdScheduledPostsPostIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PublishedPost
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostNewslettersNewsletterIdSubscribeResponse parses an HTTP response from a PostNewslettersNewsletterIdSubscribeWithResponse call
func ParsePostNewslettersNewsletterIdSubscribeResponse(rsp *http.Response) (*PostNewslettersNewsletterIdSubscribeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostNewslettersNewsletterIdSubscribeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message    *string     `json:"message,omitempty"`
			Subscriber *Subscriber `json:"subscriber,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 409:
		var dest Conflict
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON409 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetNewslettersNewsletterIdSubscribersResponse parses an HTTP response from a GetNewslettersNewsletterIdSubscribersWithResponse call
func ParseGetNewslettersNewsletterIdSubscribersResponse(rsp *http.Response) (*GetNewslettersNewsletterIdSubscribersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNewslettersNewsletterIdSubscribersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Subscriber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Unauthorized
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Forbidden
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetSubscribeConfirmConfirmationTokenResponse parses an HTTP response from a GetSubscribeConfirmConfirmationTokenWithResponse call
func ParseGetSubscribeConfirmConfirmationTokenResponse(rsp *http.Response) (*GetSubscribeConfirmConfirmationTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSubscribeConfirmConfirmationTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUnsubscribeUnsubscribeTokenResponse parses an HTTP response from a GetUnsubscribeUnsubscribeTokenWithResponse call
func ParseGetUnsubscribeUnsubscribeTokenResponse(rsp *http.Response) (*GetUnsubscribeUnsubscribeTokenResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnsubscribeUnsubscribeTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Message *string `json:"message,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest BadRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest NotFound
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest InternalServerError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// (Admin) List All Newsletters
	// (GET /admin/newsletters)
	GetAdminNewsletters(w http.ResponseWriter, r *http.Request)
	// (Admin) Delete Any Newsletter
	// (DELETE /admin/newsletters/{newsletterId})
	DeleteAdminNewslettersNewsletterId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID)
	// (Admin) List All Users (Profiles)
	// (GET /admin/users)
	GetAdminUsers(w http.ResponseWriter, r *http.Request)
	// (Admin) Grant Admin Privileges
	// (PUT /admin/users/{userId}/grant-admin)
	PutAdminUsersUserIdGrantAdmin(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// (Admin) Revoke Admin Privileges
	// (PUT /admin/users/{userId}/revoke-admin)
	PutAdminUsersUserIdRevokeAdmin(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID)
	// Request Password Reset
	// (POST /auth/password-reset-request)
	PostAuthPasswordResetRequest(w http.ResponseWriter, r *http.Request)
	// Editor Sign In
	// (POST /auth/signin)
	PostAuthSignin(w http.ResponseWriter, r *http.Request)
	// Editor Sign Up
	// (POST /auth/signup)
	PostAuthSignup(w http.ResponseWriter, r *http.Request)
	// Get Current Editor Profile
	// (GET /me)
	GetMe(w http.ResponseWriter, r *http.Request)
	// Update Current Editor Profile
	// (PUT /me)
	PutMe(w http.ResponseWriter, r *http.Request)
	// List Editor's Newsletters
	// (GET /newsletters)
	GetNewsletters(w http.ResponseWriter, r *http.Request)
	// Create Newsletter
	// (POST /newsletters)
	PostNewsletters(w http.ResponseWriter, r *http.Request)
	// Delete Newsletter
	// (DELETE /newsletters/{newsletterId})
	DeleteNewslettersNewsletterId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID)
	// Get Newsletter Details
	// (GET /newsletters/{newsletterId})
	GetNewslettersNewsletterId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID)
	// Update Newsletter
	// (PUT /newsletters/{newsletterId})
	PutNewslettersNewsletterId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID)
	// List Published Posts for a Newsletter
	// (GET /newsletters/{newsletterId}/posts)
	GetNewslettersNewsletterIdPosts(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID)
	// Publish or Schedule a New Post to Newsletter
	// (POST /newsletters/{newsletterId}/posts)
	PostNewslettersNewsletterIdPosts(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID)
	// List Scheduled Posts for a Newsletter
	// (GET /newsletters/{newsletterId}/scheduled-posts)
	GetNewslettersNewsletterIdScheduledPosts(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID)
	// Cancel (Delete) a Scheduled Post
	// (DELETE /newsletters/{newsletterId}/scheduled-posts/{postId})
	DeleteNewslettersNewsletterIdScheduledPostsPostId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID, postId openapi_types.UUID)
	// Get a Specific Scheduled Post
	// (GET /newsletters/{newsletterId}/scheduled-posts/{postId})
	GetNewslettersNewsletterIdScheduledPostsPostId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID, postId openapi_types.UUID)
	// Update a Scheduled Post
	// (PUT /newsletters/{newsletterId}/scheduled-posts/{postId})
	PutNewslettersNewsletterIdScheduledPostsPostId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID, postId openapi_types.UUID)
	// Subscribe to Newsletter
	// (POST /newsletters/{newsletterId}/subscribe)
	PostNewslettersNewsletterIdSubscribe(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID)
	// List Subscribers of a Newsletter
	// (GET /newsletters/{newsletterId}/subscribers)
	GetNewslettersNewsletterIdSubscribers(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID)
	// Confirm Subscription
	// (GET /subscribe/confirm/{confirmationToken})
	GetSubscribeConfirmConfirmationToken(w http.ResponseWriter, r *http.Request, confirmationToken string)
	// Unsubscribe from Newsletter
	// (GET /unsubscribe/{unsubscribeToken})
	GetUnsubscribeUnsubscribeToken(w http.ResponseWriter, r *http.Request, unsubscribeToken string)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// (Admin) List All Newsletters
// (GET /admin/newsletters)
func (_ Unimplemented) GetAdminNewsletters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (Admin) Delete Any Newsletter
// (DELETE /admin/newsletters/{newsletterId})
func (_ Unimplemented) DeleteAdminNewslettersNewsletterId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (Admin) List All Users (Profiles)
// (GET /admin/users)
func (_ Unimplemented) GetAdminUsers(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (Admin) Grant Admin Privileges
// (PUT /admin/users/{userId}/grant-admin)
func (_ Unimplemented) PutAdminUsersUserIdGrantAdmin(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// (Admin) Revoke Admin Privileges
// (PUT /admin/users/{userId}/revoke-admin)
func (_ Unimplemented) PutAdminUsersUserIdRevokeAdmin(w http.ResponseWriter, r *http.Request, userId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Request Password Reset
// (POST /auth/password-reset-request)
func (_ Unimplemented) PostAuthPasswordResetRequest(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Editor Sign In
// (POST /auth/signin)
func (_ Unimplemented) PostAuthSignin(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Editor Sign Up
// (POST /auth/signup)
func (_ Unimplemented) PostAuthSignup(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Current Editor Profile
// (GET /me)
func (_ Unimplemented) GetMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Current Editor Profile
// (PUT /me)
func (_ Unimplemented) PutMe(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Editor's Newsletters
// (GET /newsletters)
func (_ Unimplemented) GetNewsletters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Create Newsletter
// (POST /newsletters)
func (_ Unimplemented) PostNewsletters(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Delete Newsletter
// (DELETE /newsletters/{newsletterId})
func (_ Unimplemented) DeleteNewslettersNewsletterId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get Newsletter Details
// (GET /newsletters/{newsletterId})
func (_ Unimplemented) GetNewslettersNewsletterId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update Newsletter
// (PUT /newsletters/{newsletterId})
func (_ Unimplemented) PutNewslettersNewsletterId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Published Posts for a Newsletter
// (GET /newsletters/{newsletterId}/posts)
func (_ Unimplemented) GetNewslettersNewsletterIdPosts(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Publish or Schedule a New Post to Newsletter
// (POST /newsletters/{newsletterId}/posts)
func (_ Unimplemented) PostNewslettersNewsletterIdPosts(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Scheduled Posts for a Newsletter
// (GET /newsletters/{newsletterId}/scheduled-posts)
func (_ Unimplemented) GetNewslettersNewsletterIdScheduledPosts(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Cancel (Delete) a Scheduled Post
// (DELETE /newsletters/{newsletterId}/scheduled-posts/{postId})
func (_ Unimplemented) DeleteNewslettersNewsletterIdScheduledPostsPostId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Get a Specific Scheduled Post
// (GET /newsletters/{newsletterId}/scheduled-posts/{postId})
func (_ Unimplemented) GetNewslettersNewsletterIdScheduledPostsPostId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Update a Scheduled Post
// (PUT /newsletters/{newsletterId}/scheduled-posts/{postId})
func (_ Unimplemented) PutNewslettersNewsletterIdScheduledPostsPostId(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID, postId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Subscribe to Newsletter
// (POST /newsletters/{newsletterId}/subscribe)
func (_ Unimplemented) PostNewslettersNewsletterIdSubscribe(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// List Subscribers of a Newsletter
// (GET /newsletters/{newsletterId}/subscribers)
func (_ Unimplemented) GetNewslettersNewsletterIdSubscribers(w http.ResponseWriter, r *http.Request, newsletterId openapi_types.UUID) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Confirm Subscription
// (GET /subscribe/confirm/{confirmationToken})
func (_ Unimplemented) GetSubscribeConfirmConfirmationToken(w http.ResponseWriter, r *http.Request, confirmationToken string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Unsubscribe from Newsletter
// (GET /unsubscribe/{unsubscribeToken})
func (_ Unimplemented) GetUnsubscribeUnsubscribeToken(w http.ResponseWriter, r *http.Request, unsubscribeToken string) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAdminNewsletters operation middleware
func (siw *ServerInterfaceWrapper) GetAdminNewsletters(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAdminNewsletters(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteAdminNewslettersNewsletterId operation middleware
func (siw *ServerInterfaceWrapper) DeleteAdminNewslettersNewsletterId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteAdminNewslettersNewsletterId(w, r, newsletterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetAdminUsers operation middleware
func (siw *ServerInterfaceWrapper) GetAdminUsers(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAdminUsers(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutAdminUsersUserIdGrantAdmin operation middleware
func (siw *ServerInterfaceWrapper) PutAdminUsersUserIdGrantAdmin(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAdminUsersUserIdGrantAdmin(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutAdminUsersUserIdRevokeAdmin operation middleware
func (siw *ServerInterfaceWrapper) PutAdminUsersUserIdRevokeAdmin(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "userId", chi.URLParam(r, "userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutAdminUsersUserIdRevokeAdmin(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthPasswordResetRequest operation middleware
func (siw *ServerInterfaceWrapper) PostAuthPasswordResetRequest(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthPasswordResetRequest(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthSignin operation middleware
func (siw *ServerInterfaceWrapper) PostAuthSignin(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthSignin(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostAuthSignup operation middleware
func (siw *ServerInterfaceWrapper) PostAuthSignup(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostAuthSignup(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMe operation middleware
func (siw *ServerInterfaceWrapper) GetMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutMe operation middleware
func (siw *ServerInterfaceWrapper) PutMe(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutMe(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNewsletters operation middleware
func (siw *ServerInterfaceWrapper) GetNewsletters(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNewsletters(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostNewsletters operation middleware
func (siw *ServerInterfaceWrapper) PostNewsletters(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNewsletters(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteNewslettersNewsletterId operation middleware
func (siw *ServerInterfaceWrapper) DeleteNewslettersNewsletterId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNewslettersNewsletterId(w, r, newsletterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNewslettersNewsletterId operation middleware
func (siw *ServerInterfaceWrapper) GetNewslettersNewsletterId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNewslettersNewsletterId(w, r, newsletterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutNewslettersNewsletterId operation middleware
func (siw *ServerInterfaceWrapper) PutNewslettersNewsletterId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutNewslettersNewsletterId(w, r, newsletterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNewslettersNewsletterIdPosts operation middleware
func (siw *ServerInterfaceWrapper) GetNewslettersNewsletterIdPosts(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNewslettersNewsletterIdPosts(w, r, newsletterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostNewslettersNewsletterIdPosts operation middleware
func (siw *ServerInterfaceWrapper) PostNewslettersNewsletterIdPosts(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNewslettersNewsletterIdPosts(w, r, newsletterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNewslettersNewsletterIdScheduledPosts operation middleware
func (siw *ServerInterfaceWrapper) GetNewslettersNewsletterIdScheduledPosts(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNewslettersNewsletterIdScheduledPosts(w, r, newsletterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteNewslettersNewsletterIdScheduledPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) DeleteNewslettersNewsletterIdScheduledPostsPostId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteNewslettersNewsletterIdScheduledPostsPostId(w, r, newsletterId, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNewslettersNewsletterIdScheduledPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) GetNewslettersNewsletterIdScheduledPostsPostId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNewslettersNewsletterIdScheduledPostsPostId(w, r, newsletterId, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PutNewslettersNewsletterIdScheduledPostsPostId operation middleware
func (siw *ServerInterfaceWrapper) PutNewslettersNewsletterIdScheduledPostsPostId(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	// ------------- Path parameter "postId" -------------
	var postId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "postId", chi.URLParam(r, "postId"), &postId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "postId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutNewslettersNewsletterIdScheduledPostsPostId(w, r, newsletterId, postId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// PostNewslettersNewsletterIdSubscribe operation middleware
func (siw *ServerInterfaceWrapper) PostNewslettersNewsletterIdSubscribe(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostNewslettersNewsletterIdSubscribe(w, r, newsletterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetNewslettersNewsletterIdSubscribers operation middleware
func (siw *ServerInterfaceWrapper) GetNewslettersNewsletterIdSubscribers(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "newsletterId" -------------
	var newsletterId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "newsletterId", chi.URLParam(r, "newsletterId"), &newsletterId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "newsletterId", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetNewslettersNewsletterIdSubscribers(w, r, newsletterId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscribeConfirmConfirmationToken operation middleware
func (siw *ServerInterfaceWrapper) GetSubscribeConfirmConfirmationToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "confirmationToken" -------------
	var confirmationToken string

	err = runtime.BindStyledParameterWithOptions("simple", "confirmationToken", chi.URLParam(r, "confirmationToken"), &confirmationToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "confirmationToken", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscribeConfirmConfirmationToken(w, r, confirmationToken)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetUnsubscribeUnsubscribeToken operation middleware
func (siw *ServerInterfaceWrapper) GetUnsubscribeUnsubscribeToken(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "unsubscribeToken" -------------
	var unsubscribeToken string

	err = runtime.BindStyledParameterWithOptions("simple", "unsubscribeToken", chi.URLParam(r, "unsubscribeToken"), &unsubscribeToken, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "unsubscribeToken", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerAuthScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetUnsubscribeUnsubscribeToken(w, r, unsubscribeToken)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/newsletters", wrapper.GetAdminNewsletters)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/admin/newsletters/{newsletterId}", wrapper.DeleteAdminNewslettersNewsletterId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/admin/users", wrapper.GetAdminUsers)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/admin/users/{userId}/grant-admin", wrapper.PutAdminUsersUserIdGrantAdmin)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/admin/users/{userId}/revoke-admin", wrapper.PutAdminUsersUserIdRevokeAdmin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/password-reset-request", wrapper.PostAuthPasswordResetRequest)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/signin", wrapper.PostAuthSignin)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/auth/signup", wrapper.PostAuthSignup)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/me", wrapper.GetMe)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/me", wrapper.PutMe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/newsletters", wrapper.GetNewsletters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/newsletters", wrapper.PostNewsletters)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/newsletters/{newsletterId}", wrapper.DeleteNewslettersNewsletterId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/newsletters/{newsletterId}", wrapper.GetNewslettersNewsletterId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/newsletters/{newsletterId}", wrapper.PutNewslettersNewsletterId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/newsletters/{newsletterId}/posts", wrapper.GetNewslettersNewsletterIdPosts)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/newsletters/{newsletterId}/posts", wrapper.PostNewslettersNewsletterIdPosts)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/newsletters/{newsletterId}/scheduled-posts", wrapper.GetNewslettersNewsletterIdScheduledPosts)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/newsletters/{newsletterId}/scheduled-posts/{postId}", wrapper.DeleteNewslettersNewsletterIdScheduledPostsPostId)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/newsletters/{newsletterId}/scheduled-posts/{postId}", wrapper.GetNewslettersNewsletterIdScheduledPostsPostId)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/newsletters/{newsletterId}/scheduled-posts/{postId}", wrapper.PutNewslettersNewsletterIdScheduledPostsPostId)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/newsletters/{newsletterId}/subscribe", wrapper.PostNewslettersNewsletterIdSubscribe)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/newsletters/{newsletterId}/subscribers", wrapper.GetNewslettersNewsletterIdSubscribers)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/subscribe/confirm/{confirmationToken}", wrapper.GetSubscribeConfirmConfirmationToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/unsubscribe/{unsubscribeToken}", wrapper.GetUnsubscribeUnsubscribeToken)
	})

	return r
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xc63PbNhL/V3Z4N5OoI0tOk7vp6T65Tttzp000fkw/pBkXIpcSGgpgAVCqzqP//QYP",
	"kqBIWdTTSc+fbEkEsI/f7mIXCz4EIZ+mnCFTMhg8BAJlyplE8+FbEl3jHxlKpT+FnClk5l+SpgkNiaKc",
	"9X+XnOnvZDjBKdH//V1gHAyCv/XLqfv2V9n/TgguguVy2Q0ilKGgqZ4kGOi1wC0GZ3A7QZAoZiggJIxx",
	"BVzAnCYJ6P9TwUOUEtQEQbgxUYagOEg+RTWhbAxqQhRQCSmKEOkMI/3zCIFAmFBkClCT0guW3eCSszih",
	"4Qm4zFdyLObEhzxLIsPaCEHPl6DCKOeJQJgPm1M1MWyHmRCaCamIQuCxk4XkmQgRXmJv3OtClFkGEJAp",
	"segYZr/nYkSjCNnxuS2Wqmo0YxEKqTiPKhocZQoExplEabjO1IQL+l8EqgzhV0yhYCS5MbPYRY/OQr4o",
	"2FXBPAhncAFjZChoaGEEU5SSjLELYzpDBvMJMiAMMoZ/phhqZYacRVTPCnMiAVnIMz03Roa5d1x9zzMW",
	"HZ+jd1yBWaqKQYxK+FTgGOtnDY13rNDJCej0V9MCz9QEmXKLaMPWhFOBERAWwYRIiAlNMNKeQn/S5C9Q",
	"s4BMe4wZjYysl11HmXFxetpLgZGemiTmq1TwFIWi1gfilNBE/xNzMSUqGLhvuoFapBgMAqkEZWMtn5RI",
	"OeciqjxdfFkbsOwGOQvB4EMxbTHgYzGCj37HUOklNLnXzkXXaSWhdov3in+y1l2jMJMoNiokooqLoeAx",
	"TdBQWaOi+kidjBlRRNxnoio3/bkbsCxJyEgPUyLDBimGAonC6J6oyuiIKDxTdIqBFhuJ3rNksXaOQmlV",
	"SFm6X0gwvwOJIqHDyMtY8CncZCkZEYkGaZ1e0K1rfOO6cZYk94xMjVA2ckqjOol3EgVcvYU6SRWKsoxG",
	"bQii8p5EU8rsQjHJEhUMYpJIrDu6yIQKCdQGEzTCMqZkpqBSCaLoDCEVdEYTHKPsradhxHmChBnUpdGe",
	"Gm0EYR4AquALeYSVZShTr78urY8yhWMUegbnsxssZcU0zZzl802G+Q7nMkGlsImkAyC6oqwW2LLau6dV",
	"Z9QaNrsNy5Ff9zuHQICvEbPS43q4NFKva2NFklUreG/+IQl4X+e7K1ZM3Wvjx3JhrERfMsXmCfdm+M4I",
	"eUuG3+Ec+NGZxjmwLRivMTl0MfEaJSovJdkxVDdG3ibhDrNRQuVkyOX6Vd0u6H6ipg0h5z+3P/8E7pGc",
	"/ZRL1WvaQORTKfxT1acaJoQy0L/BDIX0lKQnzBdppSYd66MsKSyy2Qh6cBUXO6duuZLJw0YIxSwQcwFq",
	"QiVoY4aXVzfv4Zt/nr8CqwigDO5uLzs9eK8mKOZUYhdSK1qMgE6nGFGiMFlUYpzvHTZypKhKWnhy+1i3",
	"qrRHNI+R1v1fQ+kH2Vg9SVgp3MWuCxdg24v5x61G51IG/kTBfELDSaklKj1bsVWIEv5rrWVnW5CKqKzu",
	"+oMb830FP65Q8CISJFYvuvCioFN/cERSNvY+2Z9srvWi00Zuh7bNm2yk2Ro17rU4i6kWGuWsTITaJwyb",
	"s7xdsS/vHW02ed68bd4f9jIX1H64z1gxUWuRtg6xTpkGo5sj+0o+V0njFIeCzsb0bTcStRwxzARVixud",
	"IluKRkgECp2XlZ++zxf88ZfbwFUZjE7NryUBE6VSW/GgLOZ1ti6GVy6iIvzAodzhQZoQpdnqwXdMuwAJ",
	"AsdUmjIS6ORewkub5MoO/MoUhzATRKEpkTj71dNSAXzOvH2YtOVSruNzPlFpZrIDIWGldEHx3q/sJktT",
	"LpQsA7hZpvR0pfvoml9MGglxxkK7v6Bavb1fWVC4iKDK7sXwKugGLu4Fg2B23nvVO9eo4SkyktJgELzu",
	"nfdem7KJmhjN9M0yfY83/e0YG1z2NSpBcYYSCCRUmlhNkqQiFx19JwhyIRVOe6ZETQW6nHglFdaQNZ7n",
	"KtK8oLrQD73zKOlWC+xfn59vVUijCqdyUwHHS0XLvTQRgiyaymwX6zg3Jb8356/WLVcw0q/UBc2g15sH",
	"lWXoZTf4h5XD4yOa6r++dQaDD1W7/PBx+VE7wemUiEUwCF4adXTgJ83wRZJAVTOKjKV2BOapwM+sZPBR",
	"L1RHVv+h/HAVLS3CElQNOdBb870EwhaelPeAl51wFWHvPHrqaHvTmJvltFjSI5CZqSPGWZIsYLSwtJwS",
	"Dm8soY+PKCrmJ8ePlTxcsIWHoI0A0i5KkClaj/RhVQ9Xb+vZsQ5pU8LI2MQzykw5WU2CPM8O2Kq283Bm",
	"Y3LpOFa3Dquh8GMJb+P9t3aZepTOFWOaoNzJTd7JUznIlQr3tj6yyupf30ve2e2Ak5fsNCDdSrTiJQ2M",
	"+g/6z1W07I8FYeqsqEW3NAUjasXBjG7EUoNR2CX3MwedMjag/wdNRx3U9pBWphjSmLqd2FY2MMw8G7gz",
	"9JulcvnuZRPbHPbUob/KqlHFSpBwRtACnV5HwXM4cYZmNA1W0MNC0DtZmcAZ/4Q7m5kdXod3LPj09MZ2",
	"baiRzeQc3N7sap+hwVmlPBvc4QzOqnp7i8vUpJ+fzp8JlKjOhFexcIXi1WNVqqg5ViWQjwUzFuKEz/MC",
	"nEQW6dzAnUybNh/inkso+wQzSorj4E4DoLlUmunGgxJrnCjVtzxaHAzJjUstq1UV7QqWzda0UuauisZK",
	"QSJT8JLrJEkqkZmqQXEe0dnVBvbDWgGmvFetoNzIwcdQpWHFx5CkY+b8cyNmvJFoMGFP4gnT4jG9bEDg",
	"x19u18Pgxq5wHMWvtsy01/nBli9aYJocaLVRqHSbp/SZBwKZ9T+g1QlXrDW4snQ9uK5dwRCITjQdtnrV",
	"VhOYEBYlaBssSagy4rIec4REOXsceVn6/4k8y7uHOO3XpTmzE6gywTAy7syI0paXO0/rxHx83aWb8GWP",
	"9l1ZoJbE/4xPum+6dA2xmPd4pWV+/wQm3HZP8gMqyEl32siZLLVRbEOKnXJtO+ukv5vNHbJ9b5sWuHqr",
	"h7PopwKR+wlcv1Jlz/3lhI+22LMNQ1vATzuBXc9V/DMVPteucLSw8cXb7UR5PGqqEn4p5ygHOUM5DQJM",
	"ja/oim0+DqlVsRu3FbbbTrpdhVfCzg8y26lZbyNW9Xz4fUStSbDVRuLVEdZvbNAvhedadp4u9z8NDK0W",
	"mg9T6qdwe56/5XWj0G9DLItHLtnSLkrICU3XHbwd8czt+ajNybgNIrqbQlCEitDEtD3tr/tqGHpc8een",
	"9xeO12cAmX21J5i3VjCPhbVdDmctOBBsRnzUA9o1RXK7hzswyofZoyg/ZkB2TewnzuxbG1hTYvBcjN8j",
	"+dg75vf1fnS7VKTsvTVjzRZ1a6OB2wmVZkoJX5FEIIkW5cxf2am3CSBDw8cpEptqb/tWuc2K6J4DjU2h",
	"ConC0ENUI7aHRVPkITqEThF2WuR75nIDXMXwm98j/5u5fl+/P+K3w//b9pzaOyFUvZBrLoZsFb6qSWSz",
	"kR3hQKx+WejEeeWKYTfUt7T4SwE/R7F9rd9JHLiAGwdpa/jGEegt4iYnsDG+FaZytkOkM96oek8rzlQm",
	"3AUUd0a2UwDcIrTlovkyYpzXwP4c48oYVyjxLxfjtjPA/oP+s6HadI1Tbk3RRLz8XTQltEaZKt5QUTjk",
	"w5WhqhY3NAS3Kk3dVMAPIWEhJslzgapWsjSCgZdWCx0gK/bR1hp2Kl5VPdRRnPQ6yJyfbrOyAsXn2pZf",
	"2yJwk6NhN+B9dm64u56IKt433opIS+weutx2kSR8Lr2mLMVdTci+lSu/8y1WMyFzM9hY8dECwvqq3VrT",
	"/nySoKfzK88lvQOX9HYLhZs2Yfnd0y3a2qu1+srt1acqm+T+o2i596myxZSi1CztWwyRiur7qrYqeBSX",
	"eI9k703Xt49g8NUOpfUvbvLuvIuWpI9QNHci1fyGx6rnLUxLn//aAa97ubO7I9nSwt+c/2vzgOI9l4fr",
	"ILzx8duYDPpi28bQt+wv8sYdv57h0XiKYoaP1K0qGSWdz9tmV8XwYGK2YxsPoLo1BH+uNYxC3X3njvoP",
	"vl+65Z+QLdca1aV91HTI+J7OxiEC5s0f9u6VcXCNBlOI1812ubp+cKJAsLVDL17OcqCN4ElNoCxLWC7A",
	"Z+0RX7wByUZj9hqOznP0lsXGtrgMeRocPl7WID1sBMI6uDfC23sNTf/B+7AB17Utlze0AHfG6B/mZcsF",
	"xvO7WI0wvyunuFsh5HMCuEfblw1rjxGrnVY7jVbo1lAuEaHR4K6XbnTeWZPm2yO6Regy8mgi/S3OMOHp",
	"1LwB3DwVdE2Dvn250KDfT3hIkgmXavDN+TfnfZLS/uxVsPy4/F8AAAD//yxuHo/xXQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
